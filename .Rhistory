pmedianCI <- ppred+
geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=PREDmedlow, yend = PREDmedup,col=DOSEL),size=2,alpha=0.5) +
geom_errorbarh(data=statsdata,
aes(x=med,y=dummyy,xmax = up, xmin = low,col=DOSEL),height = 1,size=2,alpha=0.6 )
pmedianCI
pmedianCI <- ppred+
geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=PREDmedlow, yend = PREDmedup,col=DOSEL),size=2,alpha=0.5) +
geom_errorbarh(data=statsdata,
aes(x=med,y=dummyy,xmax = up, xmin = low,col=DOSEL),height = 1,size=2,alpha=0.6 )+
geom_errorbarh(data=statsdata ,
aes(x=med,y=dummyy,xmax = seven, xmin = quart,col=DOSEL),height = 1.5,size=2,alpha=0.6 )
pmedianCI
pmedianCI <- ppred+
geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=PREDmedlow, yend = PREDmedup,col=DOSEL),size=2,alpha=0.5) +
geom_errorbarh(data=statsdata,
aes(x=med,y=dummyy,xmax = up, xmin = low,col=DOSEL),height = 1,size=2,alpha=0.6 )+
geom_errorbarh(data=statsdata ,
aes(x=med,y=dummyy,xmax = seven, xmin = quart,col=DOSEL),height = 1.5,size=2,alpha=0.6 )+
geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=dummyy-1, yend = dummyy+1,col=DOSEL),size=1,alpha=1)+
scale_y_continuous(lim=c(min(statsdata$dummyy),15),breaks=seq(-14,14,2)) +
theme(legend.title = element_blank())
pmedianCI
ppred2 <- ggplot(new.dat,aes(x=CONC,y=pred)) +
geom_line() +
coord_cartesian(xlim = range(new.dat$CONC))+
geom_ribbon(aes(ymin=Lower,ymax=Upper),alpha=0.2,fill="blue") +
geom_point(data=qtcdatam,aes(x=CONC,y=deltaqtcf,color=DOSEL),size=0.1,alpha=0.1) +
labs(x=expression(paste("Sitravatinib Concentrations (ng/mL)")),y=DELTAQTcF.label )+
scale_y_continuous(lim=c(min(statsdata$dummyy),15),breaks=seq(-14,14,2)) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
theme(aspect.ratio=1)+geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=PREDmedlow, yend = PREDmedup,col=DOSEL),size=2,alpha=0.5) +
geom_errorbarh(data=statsdata,
aes(x=med,y=dummyy,xmax = up, xmin = low,col=DOSEL),height = 1,size=2,alpha=0.6 )+
geom_errorbarh(data=statsdata ,
aes(x=med,y=dummyy,xmax = seven, xmin = quart,col=DOSEL),height = 1.5,size=2,alpha=0.6 )+
geom_segment(data=statsdata ,  aes(x=med,xend =  med ,y=dummyy-1, yend = dummyy+1,col=DOSEL),size=1,alpha=1)+
scale_colour_discrete(name = "Dose (mg/kg)")+
geom_hline( yintercept = c(10,20), col = c("red", "darkred"), linetype = 2)+
theme(legend.title = element_blank())
ppred2
p.dQTCF.vs.time.by.stud2
install.packages("Reporter")
library(xptdef)
lhtemplate
template
?helps
# object plotted: observed PI + median and CI of simulated PI + median
rm(list=ls())
require(reshape2)
require(ggplot2)
require(Hmisc)
require(PCSmisc)
require(data.table)
library(grid)
library(gridExtra)
library(lhtool)
require(Hmisc)
require(dplyr)
require(tidyr)
require(ggplot2)
###-------FUNCTIONS-------####
gc()
#setwd("C:/Users/nfarhat/Desktop/VPC_PredCorr")
phxdata <- read.csv("../Residuals.csv", na.strings=".")
unique(phxdata$Name)
#phxdata <-phxdata[phxdata$Name=="First pass With lag pre_structural",]
phxvpc <- fread("PredCheckAll.csv", data.table=F)
head(phxvpc)
phxvpc$DV<-phxvpc$DV
names(phxvpc)<-toupper(names(phxvpc))
phxvpc$REPLICATE <- as.numeric(phxvpc$REPLICATE)
indir<-"//certara.com/sites/S02-Cary/Consulting/Projects/projects/Chemocentryx/CHEM-PMX-AVACOPAN-1230/Data/Dataset Development/"
phxin<-read.csv(paste0(indir,"PK dataset_noADDL_phoenix_update.csv"),stringsAsFactors=F,as.is=T,na.strings = c("", ".", "NA"))
head(phxin)
names(phxin)<-tolower(names(phxin))
phxin<-phxin[phxin$mdv1==0,]
phxin<-phxin[phxin$study!=" CL005",]
names(phxin)
#phxin<-phxin[order(phxin$id,phxin$rtime),]
#phxin<-phxin[!is.na(phxin$dv1),]
range(phxin$dv1)
#verification of the order of the data
#!OK!
#transfer information in PHX out
REP<-nrow(phxvpc)/nrow(phxin)
REP
phxdata$study<-phxin$study
phxdata$visit<-phxin$visit
phxdata$ntime<-phxin$ntime
phxvpc$study<-rep(phxin$study,times=REP)
phxvpc$visit<-rep(phxin$visit,times=REP)
phxvpc$ntime<-rep(phxin$ntime,times=REP)
#phxvpc$trt<-rep(phxin$trt,times=REP)
head(phxvpc)
names(phxdata)
phxvpc$ObsName <- rep(phxdata$DV,times=REP)
phxvpc$TAD <- rep(phxdata$TAD,times=REP)
#phxvpc$combo <- rep(phxdata$combo,times=REP)
phxvpc$PRED<-rep(phxdata$PRED,times=REP)
range(phxdata$TAD)
xnamelog<-"Time after dose (h)"
brd<-seq(0,1400,4)
nbins<-16
write.csv(phxdata,"phxdata.csv")
write.csv(phxvpc,"phxvpc.csv")
origdat<-read.csv("phxdata.csv")
simdat<-read.cev("phxvpc.csv")
#setwd("C:/Users/nfarhat/Desktop/VPC_PredCorr")
dir<-"//certara.com/sites/S02-Cary/Consulting/Projects/projects/Chemocentryx/CHEM-PMX-AVACOPAN-1230/Analysis/Development/Phoenix/FULL1/VPC"
phxdata <- read.csv(file.path(dir,"Residuals.csv"), na.strings=".")
phxvpc <- fread(file.path(dir,"PredCheckAll.csv"), data.table=F)
dir1<-"//certara.com/sites/S02-Cary/Consulting/Projects/projects/Chemocentryx/CHEM-PMX-AVACOPAN-1230/Analysis/Development/Phoenix/FULL1"
phxdata <- read.csv(file.path(dir1,"Residuals.csv"), na.strings=".")
phxvpc$DV<-phxvpc$DV
names(phxvpc)<-toupper(names(phxvpc))
phxvpc$REPLICATE <- as.numeric(phxvpc$REPLICATE)
indir<-"//certara.com/sites/S02-Cary/Consulting/Projects/projects/Chemocentryx/CHEM-PMX-AVACOPAN-1230/Data/Dataset Development/"
phxin<-read.csv(paste0(indir,"PK dataset_noADDL_phoenix_update.csv"),stringsAsFactors=F,as.is=T,na.strings = c("", ".", "NA"))
head(phxin)
names(phxin)<-tolower(names(phxin))
phxin<-phxin[phxin$mdv1==0,]
phxin<-phxin[phxin$study!=" CL005",]
names(phxin)
#phxin<-phxin[order(phxin$id,phxin$rtime),]
#phxin<-phxin[!is.na(phxin$dv1),]
range(phxin$dv1)
#verification of the order of the data
#!OK!
#transfer information in PHX out
REP<-nrow(phxvpc)/nrow(phxin)
REP
phxdata$study<-phxin$study
phxdata$visit<-phxin$visit
phxdata$ntime<-phxin$ntime
phxvpc$study<-rep(phxin$study,times=REP)
phxvpc$visit<-rep(phxin$visit,times=REP)
phxvpc$ntime<-rep(phxin$ntime,times=REP)
#phxvpc$trt<-rep(phxin$trt,times=REP)
head(phxvpc)
names(phxdata)
phxvpc$ObsName <- rep(phxdata$DV,times=REP)
phxvpc$TAD <- rep(phxdata$TAD,times=REP)
#phxvpc$combo <- rep(phxdata$combo,times=REP)
phxvpc$PRED<-rep(phxdata$PRED,times=REP)
range(phxdata$TAD)
xnamelog<-"Time after dose (h)"
brd<-seq(0,1400,4)
nbins<-16
write.csv(phxdata,"phxdata.csv")
write.csv(phxvpc,"phxvpc.csv")
origdat<-read.csv("phxdata.csv")
simdat<-read.cev("phxvpc.csv")
write.csv(phxvpc,"phxvpc.csv")
simdat<-read.csv("phxvpc.csv")
hist(origdat$TAD[origdat$TAD<24])
brk<-c(2,4,6,12,24,48,100)
origdat<-lhcut(origdat,"TAD",brk,newvar="bin")
simdat<-lhcut(simdat,"TAD",brk,newvar="bin")
head(simdat)
simdat$DV<-exp(simdat$DV);simdat$PRED<-exp(simdat$PRED)
origdat$DV<-exp(origdat$DV);origdat$PRED<-exp(origdat$PRED)
vpcdat<-lhvpc_stat(obs.data = origdat, sim.data = simdat, bin = "bin", prob = c(0.025,0.5, 0.975), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = 1, replicate = "REPLICATE", pred.corr = NULL)
lhvpc_stat
devtools::install_git("leonpheng/lhtool")
devtools::install_git("leonpheng\lhtool")
library(devtools)
devtools::install_github("leonpheng/lhtool")
library(lhtool)
lhvpc_stat
devtools::install_github("leonpheng/lhtool")
devtools::install_github("leonpheng/lhtool")
devtools::install_github("leonpheng/lhtool",force=T)
library(lhtool)
lhvpc_stat
origdat<-read.csv("phxdata.csv")
simdat<-read.csv("phxvpc.csv")
hist(origdat$TAD[origdat$TAD<24])
brk<-c(2,4,6,12,24,48,100)
origdat<-lhcut(origdat,"TAD",brk,newvar="bin")
simdat<-lhcut(simdat,"TAD",brk,newvar="bin")
head(simdat)
simdat$DV<-exp(simdat$DV);simdat$PRED<-exp(simdat$PRED)
origdat$DV<-exp(origdat$DV);origdat$PRED<-exp(origdat$PRED)
vpcdat<-lhvpc_stat(obs.data = origdat, sim.data = simdat, bin = "bin", prob = c(0.025,0.5, 0.975), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = 1, replicate = "REPLICATE", pred.corr = NULL)
lhvpc_stat
vpcdat<-lhvpc_stat(obs.data = origdat, sim.data = simdat, bin = "bin", prob = c(0.025,0.5, 0.975), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = 1, replicate = "REPLICATE", pred.corr = NULL)
xx<-paste0("quantile(x,",prob[i],")")
xx
obs.data = origdat
sim.data = simdat
bin = "bin"
prob = c(0.025,0.5, 0.975)
sort = NULL
dv = "DV"
tad = "TAD"
rtime = "IVAR"
blq = 1
replicate = "REPLICATE"
pred.corr = NULL
lhvpc_stat
if (!is.null(pred.corr)) {
medpred <- median(obs.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
obs.data[, dv] <- obs.data[, dv] * medpred/obs.data[,
pred.corr[1]]
}
else {
obs.data[, dv] <- obs.data[, dv] + medpred - obs.data[,
pred.corr[1]]
}
}
else {
obs.data[, dv] <- obs.data[, dv]
}
if (!is.null(pred.corr)) {
medpred <- median(obs.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
obs.data[, dv] <- obs.data[, dv] * medpred/obs.data[,
pred.corr[1]]
} else {
obs.data[, dv] <- obs.data[, dv] + medpred - obs.data[,
pred.corr[1]]
}
} else {
obs.data[, dv] <- obs.data[, dv]
}
var <- NULL
for (i in 1:length(prob)) {
namqt <- paste0("qt", prob[i] * 100)
var <- c(var, namqt)
if (prob[i] == prob[1]) {
obs1 <- addvar(obs.data, c(sort, "bin"), dv, "quantile(x,prob[i])",
"no", namqt)
} else {
obs1 <- dplyr::left_join(obs1, addvar(obs.data, c(sort,
"bin"), dv, "quantile(x,prob[i])", "no", namqt))
}
}
obs1 <- lhlong(obs1, var)
if (!is.null(pred.corr)) {
medpred <- median(sim.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
sim.data[, dv] <- sim.data[, dv] * medpred/sim.data[,
pred.corr[1]]
} else {
sim.data[, dv] <- sim.data[, dv] + medpred - sim.data[,
pred.corr[1]]
}
} else {
sim.data[, dv] <- sim.data[, dv]
}
library(plyr)
if (!is.null(pred.corr)) {
medpred <- median(obs.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
obs.data[, dv] <- obs.data[, dv] * medpred/obs.data[,
pred.corr[1]]
} else {
obs.data[, dv] <- obs.data[, dv] + medpred - obs.data[,
pred.corr[1]]
}
} else {
obs.data[, dv] <- obs.data[, dv]
}
var <- NULL
for (i in 1:length(prob)) {
namqt <- paste0("qt", prob[i] * 100)
var <- c(var, namqt)
if (prob[i] == prob[1]) {
obs1 <- addvar(obs.data, c(sort, "bin"), dv, "quantile(x,prob[i])",
"no", namqt)
} else {
obs1 <- dplyr::left_join(obs1, addvar(obs.data, c(sort,
"bin"), dv, "quantile(x,prob[i])", "no", namqt))
}
}
obs1 <- lhlong(obs1, var)
obs1 <- lhlong(obs1, var)
if (!is.null(pred.corr)) {
medpred <- median(sim.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
sim.data[, dv] <- sim.data[, dv] * medpred/sim.data[,
pred.corr[1]]
} else {
sim.data[, dv] <- sim.data[, dv] + medpred - sim.data[,
pred.corr[1]]
}
} else {
sim.data[, dv] <- sim.data[, dv]
}
library(reshape)
obs1 <- lhlong(obs1, var)
if (!is.null(pred.corr)) {
medpred <- median(sim.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
sim.data[, dv] <- sim.data[, dv] * medpred/sim.data[,
pred.corr[1]]
} else {
sim.data[, dv] <- sim.data[, dv] + medpred - sim.data[,
pred.corr[1]]
}
} else {
sim.data[, dv] <- sim.data[, dv]
}
i=1
namqt <- paste0("qt", prob[i] * 100)
var <- c(var, namqt)
exp<-paste0("quantile(x,",prob[i],")"))
prob[i]
exp<-paste0("quantile(x,",prob[i],")")
exp<-paste0("quantile(x,",prob[i],")")
if (prob[i] == prob[1]) {
s1 <- addvar(sim.data, c(sort, bin, replicate), dv,
exp, "no", namqt)
}
s1 <- dplyr::left_join(s1, addvar(sim.data, c(sort,
bin, replicate), dv, exp, "no",
namqt))
if (!is.null(pred.corr)) {
medpred <- median(obs.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
obs.data[, dv] <- obs.data[, dv] * medpred/obs.data[,
pred.corr[1]]
} else {
obs.data[, dv] <- obs.data[, dv] + medpred - obs.data[,
pred.corr[1]]
}
} else {
obs.data[, dv] <- obs.data[, dv]
}
j=1
lhvpc_stat<-function (obs.data = obs, sim.data = sim, bin = "bin", prob = c(0.025,
0.5, 0.95), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = NULL, replicate = "REPLICATE", pred.corr = NULL)
{
library(reshape)
if (!is.null(pred.corr)) {
medpred <- median(obs.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
obs.data[, dv] <- obs.data[, dv] * medpred/obs.data[,
pred.corr[1]]
} else {
obs.data[, dv] <- obs.data[, dv] + medpred - obs.data[,
pred.corr[1]]
}
} else {
obs.data[, dv] <- obs.data[, dv]
}
var <- NULL
for (i in 1:length(prob)) {
namqt <- paste0("qt", prob[i] * 100)
exp<-paste0("quantile(x,",prob[i],")")
var <- c(var, namqt)
if (prob[i] == prob[1]) {
obs1 <- addvar(obs.data, c(sort, "bin"), dv, exp,
"no", namqt)
} else {
obs1 <- dplyr::left_join(obs1, addvar(obs.data, c(sort,
"bin"), dv,exp, "no", namqt))
}
}
obs1 <- lhlong(obs1, var)
if (!is.null(pred.corr)) {
medpred <- median(sim.data[, pred.corr[1]])
if (pred.corr[2] == "lin") {
sim.data[, dv] <- sim.data[, dv] * medpred/sim.data[,
pred.corr[1]]
} else {
sim.data[, dv] <- sim.data[, dv] + medpred - sim.data[,
pred.corr[1]]
}
} else {
sim.data[, dv] <- sim.data[, dv]
}
var <- NULL
for (i in 1:length(prob)) {
namqt <- paste0("qt", prob[i] * 100)
exp<-paste0("quantile(x,",prob[i],")")
var <- c(var, namqt)
if (prob[i] == prob[1]) {
s1 <- addvar(sim.data, c(sort, bin, replicate), dv,
exp, "no", namqt)
}else {
s1 <- dplyr::left_join(s1, addvar(sim.data, c(sort,
bin, replicate), dv, exp, "no",
namqt))
}
}
s1 <- lhlong(s1, var)
namvar <- c("low", "med", "up")
for (j in 1:3) {
exp<-paste0("quantile(x,",prob[j],")")
if (j == 1) {
s2 <- addvar(s1, c(bin, "variable"), "value", exp,
"no", namvar[1])
} else {
s2 <- dplyr::left_join(s2, addvar(s1, c(bin, "variable"),
"value", exp, "no", namvar[j]))
}
}
if (!is.null(blq)) {
if (is.numeric(blq)) {
obs.data$blq <- obs.data[, dv] <= blq
sim.data$blq <- sim.data[, dv] <= blq
}
else {
obs.data$blq <- obs.data[, dv] <= obs.data[, blq]
sim.data$blq <- sim.data[, dv] <= sim.data[, blq]
}
blqo <- addvar(obs.data, bin, "blq", "sum(x)", "no",
"blqo")
blqo <- dplyr::left_join(blqo, addvar(obs.data, bin,
"blq", "length(x)", "no", "nblqo"))
blqo$blqo <- blqo$blqo/blqo$nblqo * 100
blqs <- addvar(sim.data, bin, "blq", "sum(x)", "no",
"blqs")
blqs <- dplyr::left_join(blqs, addvar(sim.data, bin,
"blq", "length(x)", "no", "nblqs"))
blqs$blqs <- blqs$blqs/blqs$nblqs * 100
} else {
blqo <- NULL
blqs <- NULL
}
names(obs1) <- paste0("OBS.", names(obs1))
names(s2) <- paste0("SIM.", names(s2))
output <- lhcbind(obs1, s2)
out1 <- dplyr::left_join(lhmutate(obs.data[, c(sort, "bin",
dv, tad, rtime)], "bin=SIM.bin"), output)
if (!is.null(blqo)) {
out1 <- dplyr::left_join(lhmutate(blqo, "bin=SIM.bin"),
out1)
out1 <- dplyr::left_join(lhmutate(blqs, "bin=SIM.bin"),
out1)
} else {
out1 <- out1
}
out1
}
vpcdat<-lhvpc_stat(obs.data = origdat, sim.data = simdat, bin = "bin", prob = c(0.025,0.5, 0.975), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = 1, replicate = "REPLICATE", pred.corr = NULL)
vpcdat
devtools::install_github("leonpheng/lhtool",force=T)
rm(list=ls())
require(reshape2)
require(ggplot2)
require(Hmisc)
require(PCSmisc)
require(data.table)
library(grid)
library(gridExtra)
library(lhtool)
require(Hmisc)
require(dplyr)
require(tidyr)
require(ggplot2)
origdat<-read.csv("phxdata.csv")
simdat<-read.csv("phxvpc.csv")
hist(origdat$TAD[origdat$TAD<24])
brk<-c(2,4,6,12,24,48,100)
origdat<-lhcut(origdat,"TAD",brk,newvar="bin")
simdat<-lhcut(simdat,"TAD",brk,newvar="bin")
head(simdat)
simdat$DV<-exp(simdat$DV);simdat$PRED<-exp(simdat$PRED)
origdat$DV<-exp(origdat$DV);origdat$PRED<-exp(origdat$PRED)
vpcdat<-lhvpc_stat(obs.data = origdat, sim.data = simdat, bin = "bin", prob = c(0.025,0.5, 0.975), sort = NULL, dv = "DV", tad = "TAD", rtime = "IVAR",
blq = 1, replicate = "REPLICATE", pred.corr = NULL)
lhvpc_stat
devtools::create("lhtool2")
library(devtools)
create("lhtool2")
devtools::install_github("r-lib/devtools")
library(devtools)
create("lhtool2")
devtools::install_github("r-lib/devtools")
install.packages("devtools")
dir()
devtools::create("lhtool2")
devtools::create("./lhtool2")
library(lhtool2)
library(lhtool2)
tad_addl
library(lhtool2)
#remove.packages("devtools")
#
devtools::create("./xptdef2")
---
title: "Untitled"
output: html_document
---
```{r Test, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
#create package
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("./lhtool2")
document()
document()
setwd("C:/Users/lpheng/Desktop/packdev/xptdef2")
devtools::document()
devtools::install_github("leonpheng/lhtool2")
